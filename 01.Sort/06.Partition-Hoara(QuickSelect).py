"""
Алгоритм Partition (или разделение) Хоара, также известный как Quickselect, является ключевым компонентом
быстрой сортировки (Quick Sort) и служит для разделения массива на две части относительно опорного элемента.
Этот алгоритм был разработан британским информатиком Чарльзом Хоаром в 1960-х годах.

### Принцип работы алгоритма:

1. **Выбор опорного элемента:** Из массива выбирается опорный элемент. Часто выбирают первый элемент массива,
последний элемент или элемент в середине.

2. **Разделение массива:** Массив перераспределяется таким образом, что все элементы, меньшие опорного,
помещаются перед ним, а все элементы, большие или равные опорному, после него. При этом сам опорный элемент
может оказаться в любом месте после перераспределения.

3. **Возвращение индекса опорного элемента:** После разделения возвращается индекс опорного элемента.
Этот индекс может быть использован для продолжения сортировки или поиска.


### Шаги алгоритма подробнее:

- Задается левая (left) и правая (right) границы массива.
- Опорный элемент выбирается (например, первый элемент).
- Используются два указателя: один движется с начала массива к концу (left), другой с конца к началу (right).
- Пока left-позиция меньше right-позиции:
    - Сдвигаем left-позицию вправо, пока элемент в left-позиции меньше опорного.
    - Сдвигаем right-позицию влево, пока элемент в right-позиции больше опорного.
    - Если left-позиция все еще меньше или равна right-позиции, меняем элементы на этих позициях местами и
    сдвигаем указатели left и right.
- Процесс продолжается до тех пор, пока left не окажется больше right.
- В конце возвращается right, который становится индексом опорного элемента.
"""

def PartitionHoara(arr):
    left = 0
    pivot = arr[0]  # Выбор первого элемента в качестве опорного
    right = len(arr) - 1
    while left <= right:
        # Двигаем left вправо, пока элементы меньше или равны опорному
        while arr[left] <= pivot:
            left += 1
        # Двигаем right влево, пока элементы больше опорного
        while arr[right] > pivot:
            right -= 1
        if left < right:
            # производим замену элементов
            arr[left], arr[right] = arr[right], arr[left]
            # двигаем еще на шаг наши указатели
            left += 1
            right -= 1
    return arr, right

import random
arr = [random.randint(1, 20) for i in range(20)]
print(arr)
arr_partition, index = PartitionHoara(arr)
print(arr_partition, f'Индекс разделения: {index}')

"""
Код возвращает
[11, 5, 14, 5, 8, 13, 7, 2, 18, 18, 4, 11, 20, 7, 7, 4, 4, 5, 14, 7]
[11, 5, 7, 5, 8, 5, 7, 2, 4, 4, 4, 11, 7, 7, 20, 18, 18, 13, 14, 14] Индекс разделения: 13
"""