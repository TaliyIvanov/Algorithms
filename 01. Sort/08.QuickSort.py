"""
QuickSort (быстрая сортировка) — это один из самых эффективных алгоритмов сортировки,
использующий метод **разделяй и властвуй**. Он был разработан Чарльзом Хоаром в 1960-х
годах и является популярным выбором благодаря своей эффективности и простоте реализации.

По сути, данный алгоритм рекурсивно использует в себе алгоритм Partition.
Разделяя и разделяя массив пополам и разбрасывая элементы меньшие и большие опорного
элемента слева и справа от него, до тех пор, пока длина массива не будет равна 1.
Очень похож этими идеями на MergeSort, но, как мы уже видели в
06.Partition - Хоара (Quickselect)  и 07.Partition - Ломуто существенно отличается.

Данную сортировку необходимо использовать, если ты уверен, что твой массив рандомен.
Если же он отсортирован или однороден, то QuickSort будет работать за O(N^2).
Если ты не уверен в рандомности и нужна гарантия, то необходимо юзать MergeSort.

"""

# функцию partition чуть чуть видоизменяем для принятия
# необходимых аргументов
def partition(arr, low, high):
    pivot = arr[high]    # Опорный элемент
    i = low - 1    # индекс для элементов, меньших опорного

    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[j], arr[i] = arr[i], arr[j]

    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    pivot_index = i + 1
    # обязательно вернуть индекс, который будет делить массив в рекурсии
    return pivot_index

def MyQuickSort(arr, low, high):
    if high - low <= 1:
        return arr

    if low < high:
        p = partition(arr, low, high)

    MyQuickSort(arr, low, p - 1)
    MyQuickSort(arr, p + 1, high)

# Пример использования
import random

arr = [random.randint(1, 100) for _ in range(10)]
print("Исходный массив:", arr)

MyQuickSort(arr, 0, len(arr) - 1)
print("Отсортированный массив:", arr)

"""
Исходный массив: [84, 41, 58, 85, 82, 88, 81, 8, 22, 36]
Отсортированный массив: [8, 22, 36, 41, 58, 81, 82, 84, 85, 88]
"""