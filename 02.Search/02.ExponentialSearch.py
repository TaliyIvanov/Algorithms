"""
–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(logn).

–°—É—Ç—å –∑–∞–∫–ª—é—á–∞—Ç–µ—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º:
- –ò—â–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–∫–ª—é—á–µ–Ω —Ç–∞—Ä–≥–µ—Ç;
- –í–∫–ª—é—á–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–≥–µ—Ç–∞ –≤ –Ω–æ–≤—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ
–º–µ–Ω—å—à–µ, —á–µ–º –¥–ª—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.

–ù–∞–ø—Ä–∏–º–µ—Ä, —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ –º–∏–ª–ª–∏–∞—Ä–¥–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∞ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É,
—Å–∫–∞–∂–µ–º –≤ –ø–µ—Ä–≤–æ–º –º–∏–ª–ª–∏–æ–Ω–µ. –¢–æ –º—ã –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Å–º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç
–Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏–∑
–º–∏–ª–ª–∏–∞—Ä–¥–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ–Ω—å—à–µ –º–∏–ª–ª–∏–æ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–≤.

–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:
- –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –∏ —á–∞—Å—Ç–æ –∏—â—É—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É.
- –í —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∑–Ω—ã–µ —Å–ø–∏—Å–∫–∏).
- –í –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.
- –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).
"""

def BinarySearch(arr, left, right, target):
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

def ExpSearch(arr, target):
    if arr[0] == target:
        return 0
    n = len(arr)
    # –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
    left = 0
    right = 1

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
    while right < n and arr[right] < target:
        right *= 2 # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É, —Ä–∞—Å—à–∏—Ä—è—è –¥–∏–∞–ø–∞–∑–æ–Ω
        left = right // 2  # "–ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º" –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–æ –ø—Ä–∞–≤–æ–π

    # –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—à–ª–∞ –∑–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤)
    right = min(n-1, right)

    # –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫, –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É –º–∞—Å—Å–∏–≤–∞
    return BinarySearch(arr, left, right, target)

# üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
arr = [1, 3, 5, 7, 9, 11, 15, 19, 23, 27, 31]
target = 15
index = ExpSearch(arr, target)

print(f"–≠–ª–µ–º–µ–Ω—Ç {target} –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {index}" if index != -1 else "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

"""
>>> –≠–ª–µ–º–µ–Ω—Ç 15 –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 6
"""